// copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved<br>
//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>
//
// Generated by apg-js, Version 4.0.0 [apg-js](https://github.com/ldthomas/apg-js)
module.exports = function grammar(){
  // ```
  // SUMMARY
  //      rules = 20
  //       udts = 0
  //    opcodes = 104
  //        ---   ABNF original opcodes
  //        ALT = 11
  //        CAT = 11
  //        REP = 6
  //        RNM = 21
  //        TLS = 35
  //        TBS = 11
  //        TRG = 9
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        BKR = 0
  //        ABG = 0
  //        AEN = 0
  // characters = [0 - 1114111]
  // ```
  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'expression', lower: 'expression', index: 0, isBkr: false};
  this.rules[1] = {name: 'source', lower: 'source', index: 1, isBkr: false};
  this.rules[2] = {name: 'header-reference', lower: 'header-reference', index: 2, isBkr: false};
  this.rules[3] = {name: 'query-reference', lower: 'query-reference', index: 3, isBkr: false};
  this.rules[4] = {name: 'path-reference', lower: 'path-reference', index: 4, isBkr: false};
  this.rules[5] = {name: 'body-reference', lower: 'body-reference', index: 5, isBkr: false};
  this.rules[6] = {name: 'json-pointer', lower: 'json-pointer', index: 6, isBkr: false};
  this.rules[7] = {name: 'reference-token', lower: 'reference-token', index: 7, isBkr: false};
  this.rules[8] = {name: 'unescaped', lower: 'unescaped', index: 8, isBkr: false};
  this.rules[9] = {name: 'escaped', lower: 'escaped', index: 9, isBkr: false};
  this.rules[10] = {name: 'name', lower: 'name', index: 10, isBkr: false};
  this.rules[11] = {name: 'token', lower: 'token', index: 11, isBkr: false};
  this.rules[12] = {name: 'tchar', lower: 'tchar', index: 12, isBkr: false};
  this.rules[13] = {name: 'CHAR', lower: 'char', index: 13, isBkr: false};
  this.rules[14] = {name: 'escape', lower: 'escape', index: 14, isBkr: false};
  this.rules[15] = {name: 'quotation-mark', lower: 'quotation-mark', index: 15, isBkr: false};
  this.rules[16] = {name: 'unescape', lower: 'unescape', index: 16, isBkr: false};
  this.rules[17] = {name: 'HEXDIG', lower: 'hexdig', index: 17, isBkr: false};
  this.rules[18] = {name: 'DIGIT', lower: 'digit', index: 18, isBkr: false};
  this.rules[19] = {name: 'ALPHA', lower: 'alpha', index: 19, isBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* expression */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 1, children: [1,2,3,4,7]};// ALT
  this.rules[0].opcodes[1] = {type: 7, string: [36,117,114,108]};// TLS
  this.rules[0].opcodes[2] = {type: 7, string: [36,109,101,116,104,111,100]};// TLS
  this.rules[0].opcodes[3] = {type: 7, string: [36,115,116,97,116,117,115,99,111,100,101]};// TLS
  this.rules[0].opcodes[4] = {type: 2, children: [5,6]};// CAT
  this.rules[0].opcodes[5] = {type: 7, string: [36,114,101,113,117,101,115,116,46]};// TLS
  this.rules[0].opcodes[6] = {type: 4, index: 1};// RNM(source)
  this.rules[0].opcodes[7] = {type: 2, children: [8,9]};// CAT
  this.rules[0].opcodes[8] = {type: 7, string: [36,114,101,115,112,111,110,115,101,46]};// TLS
  this.rules[0].opcodes[9] = {type: 4, index: 1};// RNM(source)

  /* source */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT
  this.rules[1].opcodes[1] = {type: 4, index: 2};// RNM(header-reference)
  this.rules[1].opcodes[2] = {type: 4, index: 3};// RNM(query-reference)
  this.rules[1].opcodes[3] = {type: 4, index: 4};// RNM(path-reference)
  this.rules[1].opcodes[4] = {type: 4, index: 5};// RNM(body-reference)

  /* header-reference */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[2].opcodes[1] = {type: 7, string: [104,101,97,100,101,114,46]};// TLS
  this.rules[2].opcodes[2] = {type: 4, index: 11};// RNM(token)

  /* query-reference */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[3].opcodes[1] = {type: 7, string: [113,117,101,114,121,46]};// TLS
  this.rules[3].opcodes[2] = {type: 4, index: 10};// RNM(name)

  /* path-reference */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[4].opcodes[1] = {type: 7, string: [112,97,116,104,46]};// TLS
  this.rules[4].opcodes[2] = {type: 4, index: 10};// RNM(name)

  /* body-reference */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[5].opcodes[1] = {type: 7, string: [98,111,100,121]};// TLS
  this.rules[5].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[5].opcodes[3] = {type: 2, children: [4,5]};// CAT
  this.rules[5].opcodes[4] = {type: 7, string: [35]};// TLS
  this.rules[5].opcodes[5] = {type: 4, index: 6};// RNM(json-pointer)

  /* json-pointer */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[6].opcodes[1] = {type: 2, children: [2,3]};// CAT
  this.rules[6].opcodes[2] = {type: 7, string: [47]};// TLS
  this.rules[6].opcodes[3] = {type: 4, index: 7};// RNM(reference-token)

  /* reference-token */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[7].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[7].opcodes[2] = {type: 4, index: 8};// RNM(unescaped)
  this.rules[7].opcodes[3] = {type: 4, index: 9};// RNM(escaped)

  /* unescaped */
  this.rules[8].opcodes = [];
  this.rules[8].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[8].opcodes[1] = {type: 5, min: 0, max: 46};// TRG
  this.rules[8].opcodes[2] = {type: 5, min: 48, max: 125};// TRG
  this.rules[8].opcodes[3] = {type: 5, min: 127, max: 1114111};// TRG

  /* escaped */
  this.rules[9].opcodes = [];
  this.rules[9].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[9].opcodes[1] = {type: 7, string: [126]};// TLS
  this.rules[9].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[9].opcodes[3] = {type: 7, string: [48]};// TLS
  this.rules[9].opcodes[4] = {type: 7, string: [49]};// TLS

  /* name */
  this.rules[10].opcodes = [];
  this.rules[10].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[10].opcodes[1] = {type: 4, index: 13};// RNM(CHAR)

  /* token */
  this.rules[11].opcodes = [];
  this.rules[11].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
  this.rules[11].opcodes[1] = {type: 4, index: 12};// RNM(tchar)

  /* tchar */
  this.rules[12].opcodes = [];
  this.rules[12].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]};// ALT
  this.rules[12].opcodes[1] = {type: 7, string: [33]};// TLS
  this.rules[12].opcodes[2] = {type: 7, string: [35]};// TLS
  this.rules[12].opcodes[3] = {type: 7, string: [36]};// TLS
  this.rules[12].opcodes[4] = {type: 7, string: [37]};// TLS
  this.rules[12].opcodes[5] = {type: 7, string: [38]};// TLS
  this.rules[12].opcodes[6] = {type: 7, string: [39]};// TLS
  this.rules[12].opcodes[7] = {type: 7, string: [42]};// TLS
  this.rules[12].opcodes[8] = {type: 7, string: [43]};// TLS
  this.rules[12].opcodes[9] = {type: 7, string: [45]};// TLS
  this.rules[12].opcodes[10] = {type: 7, string: [46]};// TLS
  this.rules[12].opcodes[11] = {type: 7, string: [94]};// TLS
  this.rules[12].opcodes[12] = {type: 7, string: [95]};// TLS
  this.rules[12].opcodes[13] = {type: 7, string: [96]};// TLS
  this.rules[12].opcodes[14] = {type: 7, string: [124]};// TLS
  this.rules[12].opcodes[15] = {type: 7, string: [126]};// TLS
  this.rules[12].opcodes[16] = {type: 4, index: 18};// RNM(DIGIT)
  this.rules[12].opcodes[17] = {type: 4, index: 19};// RNM(ALPHA)

  /* CHAR */
  this.rules[13].opcodes = [];
  this.rules[13].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[13].opcodes[1] = {type: 4, index: 16};// RNM(unescape)
  this.rules[13].opcodes[2] = {type: 2, children: [3,4]};// CAT
  this.rules[13].opcodes[3] = {type: 4, index: 14};// RNM(escape)
  this.rules[13].opcodes[4] = {type: 1, children: [5,6,7,8,9,10,11,12,13]};// ALT
  this.rules[13].opcodes[5] = {type: 6, string: [34]};// TBS
  this.rules[13].opcodes[6] = {type: 6, string: [92]};// TBS
  this.rules[13].opcodes[7] = {type: 6, string: [47]};// TBS
  this.rules[13].opcodes[8] = {type: 6, string: [98]};// TBS
  this.rules[13].opcodes[9] = {type: 6, string: [102]};// TBS
  this.rules[13].opcodes[10] = {type: 6, string: [110]};// TBS
  this.rules[13].opcodes[11] = {type: 6, string: [114]};// TBS
  this.rules[13].opcodes[12] = {type: 6, string: [116]};// TBS
  this.rules[13].opcodes[13] = {type: 2, children: [14,15]};// CAT
  this.rules[13].opcodes[14] = {type: 6, string: [117]};// TBS
  this.rules[13].opcodes[15] = {type: 3, min: 4, max: 4};// REP
  this.rules[13].opcodes[16] = {type: 4, index: 17};// RNM(HEXDIG)

  /* escape */
  this.rules[14].opcodes = [];
  this.rules[14].opcodes[0] = {type: 6, string: [92]};// TBS

  /* quotation-mark */
  this.rules[15].opcodes = [];
  this.rules[15].opcodes[0] = {type: 6, string: [34]};// TBS

  /* unescape */
  this.rules[16].opcodes = [];
  this.rules[16].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
  this.rules[16].opcodes[1] = {type: 5, min: 32, max: 33};// TRG
  this.rules[16].opcodes[2] = {type: 5, min: 35, max: 91};// TRG
  this.rules[16].opcodes[3] = {type: 5, min: 93, max: 1114111};// TRG

  /* HEXDIG */
  this.rules[17].opcodes = [];
  this.rules[17].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7]};// ALT
  this.rules[17].opcodes[1] = {type: 4, index: 18};// RNM(DIGIT)
  this.rules[17].opcodes[2] = {type: 7, string: [97]};// TLS
  this.rules[17].opcodes[3] = {type: 7, string: [98]};// TLS
  this.rules[17].opcodes[4] = {type: 7, string: [99]};// TLS
  this.rules[17].opcodes[5] = {type: 7, string: [100]};// TLS
  this.rules[17].opcodes[6] = {type: 7, string: [101]};// TLS
  this.rules[17].opcodes[7] = {type: 7, string: [102]};// TLS

  /* DIGIT */
  this.rules[18].opcodes = [];
  this.rules[18].opcodes[0] = {type: 5, min: 48, max: 57};// TRG

  /* ALPHA */
  this.rules[19].opcodes = [];
  this.rules[19].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[19].opcodes[1] = {type: 5, min: 65, max: 90};// TRG
  this.rules[19].opcodes[2] = {type: 5, min: 97, max: 122};// TRG

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function toString(){
    let str = "";
    str += "; OpenAPI runtime expression ABNF syntax - https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#runtime-expressions\n";
    str += "expression       = ( \"$url\" / \"$method\" / \"$statusCode\" / \"$request.\" source / \"$response.\" source )\n";
    str += "source           = ( header-reference / query-reference / path-reference / body-reference )\n";
    str += "header-reference = \"header.\" token\n";
    str += "query-reference  = \"query.\" name\n";
    str += "path-reference   = \"path.\" name\n";
    str += "body-reference   = \"body\" [\"#\" json-pointer ]\n";
    str += "json-pointer     = *( \"/\" reference-token )\n";
    str += "reference-token  = *( unescaped / escaped )\n";
    str += "unescaped        = %x00-2E / %x30-7D / %x7F-10FFFF ; %x2F ('/') and %x7E ('~') are excluded from 'unescaped'\n";
    str += "escaped          = \"~\" ( \"0\" / \"1\" ) ; representing '~' and '/', respectively\n";
    str += "name             = *( CHAR )\n";
    str += "token            = 1*tchar\n";
    str += "tchar            = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n";
    str += "\n";
    str += "; RFC 7159 - https://www.rfc-editor.org/rfc/rfc7159\n";
    str += "CHAR = unescape /\n";
    str += "    escape (\n";
    str += "        %x22 /          ; \"    quotation mark  U+0022\n";
    str += "        %x5C /          ;     reverse solidus U+005C\n";
    str += "        %x2F /          ; /    solidus         U+002F\n";
    str += "        %x62 /          ; b    backspace       U+0008\n";
    str += "        %x66 /          ; f    form feed       U+000C\n";
    str += "        %x6E /          ; n    line feed       U+000A\n";
    str += "        %x72 /          ; r    carriage return U+000D\n";
    str += "        %x74 /          ; t    tab             U+0009\n";
    str += "        %x75 4HEXDIG )  ; uXXXX                U+XXXX\n";
    str += "escape         = %x5C              ; \\\n";
    str += "quotation-mark = %x22      ; \"\n";
    str += "unescape       = %x20-21 / %x23-5B / %x5D-10FFFF\n";
    str += "\n";
    str += "; Core rules - https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form\n";
    str += "HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n";
    str += "DIGIT  = %x30-39\n";
    str += "ALPHA  = %d65-90 / %d97-122\n";
    return str;
  }
}
